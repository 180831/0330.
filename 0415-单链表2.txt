import org.omg.CORBA.OBJ_ADAPTER;

import java.util.Arrays;

/**
 * Created with IntelliJ IDEA
 * Description:
 * User:Light_Long
 * Date:2019-04-15
 * Time:19:55
 */
public class Sequenceimpl implements Sequence {

    private Object[] elem;
    private int usedSize;
    private static final int Sequen_SIZE = 10;

    public Sequenceimpl(){
        this.elem = new Object[Sequen_SIZE];
        this.usedSize = 0;

    }

    public boolean isFull(){
        if (this.usedSize == this.elem.length){
            return true;
        }
        else{
            return false;
        }
    }
    @Override
    public boolean add(int pos, Object data) {
        //pos 的合法性 是否是满顺序表 （重新写函数构造）
        if (pos < 0 || pos > this.usedSize) {
            return false;
        }
        if (isFull()) {
            //让数组扩大为原来的2倍
            this.elem = Arrays.copyOf(this.elem, this.elem.length * 2);

        }
        for (int i = this.usedSize - 1; i >= pos; i--) {
            this.elem[i + 1] = this.elem[i];
        }
        this.elem[pos] = data;
        this.usedSize++;
        return true;
    }

    public boolean isEmpty(){
        if(this.usedSize == 0){
            return  false;
        }
        return true;
    }

    @Override
    public int search(Object key) {
        if(key == null){
            return -1;
        }
        if(isEmpty()){
            throw new UnsupportedOperationException("链表为空");
        }
        for (int i = 0; i < this.usedSize ; i++) {
            if(this.elem[i].equals(key)){
                return i;
            }
        }

        return -1;
    }

    @Override
    public boolean contains(Object key) {
        if(key == null){
            return false;
        }
        if(isEmpty()){
            throw new UnsupportedOperationException("链表为空");
        }
        for (int i = 0; i < this.usedSize ; i++) {
            if (this.elem[i].equals(key)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public Object getPos(int pos) {

        if(pos < 0 || pos >= this.usedSize || isEmpty()){
            return null;
        }
        return this.elem[pos];
    }

    @Override
    public Object remove(Object key) {

        //删除之前，保存需要删除的值喜下标作为返回值
        int index = search(key);
        if(index == -1){
            return -1;
        }
        Object oldData = this.elem[index];
        for (int i = index; i < this.usedSize - 1; i++) {
            this.elem[i] = this.elem[i+1];
        }
        this.elem[usedSize - 1] = null;
        this.usedSize--;
        return oldData;
    }

    @Override
    public int size() {
        return this.usedSize;
    }

    @Override
    public void display() {
        for (int i = 0; i < this.usedSize; i++) {
            System.out.print(this.elem[i]+" ");
        }
        System.out.println();
    }

    @Override
    public void clear() {
        for (int i = 0; i < this.usedSize - 1; i++) {
            this.elem[i] = null;
        }
        this.usedSize = 0;
    }

    public static void main(String[] args) {
        Sequenceimpl sequenceimpl = new Sequenceimpl();
        sequenceimpl.add(0,"123");
        sequenceimpl.add(1,"hello");
        sequenceimpl.add(2,"tit");
        sequenceimpl.add(1,'c');
        sequenceimpl.display();
    }
}
