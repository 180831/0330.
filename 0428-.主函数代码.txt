 //时间复杂度 logN
    public static void quick(int[] arr,int start,int end){

        if(end - start + 1 <= 16){
            insert1(arr,start,end);
        }
        int par = partion(arr,start,end);

        //找左边是否有两个数据以上
        if(par > start + 1){
            quick(arr,start,par - 1);
        }
        //找右边是否有两个数据以上
        if(par < end - 1){
            quick(arr,par + 1,end);
        }
    }

    //空间复杂度为N   时间复杂度N * logN
    public static void quickSort(int[] arr){

        quick(arr,0,arr.length -1);
    }


    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        Random random = new Random();
        int[] arr = new int[10000];
        for (int i = 0; i <10000; i++) {
            arr[i] = random.nextInt(10000) + 1;
        }
        //insert(arr);
        //shellSort(arr);
        //selectSort(arr);
        //heapSort(arr);
        quickSort(arr);
        System.out.println(Arrays.toString(arr));
        long end = System.currentTimeMillis();
        System.out.println(end - start);
    }
}