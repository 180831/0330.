线程池

synchronized底层实现;
monitorenter

Compare and swap
CAS(O,V,N) O 当前线程认为主内存的值  V 主内存的值  N 希望更新的值

自旋
处理器上运行无用程序，但是线程不阻塞
自适应自旋
JVM给一个时间段，在该时间段内，线程是自旋状态，若是在该时间段内取到锁，则下一次适当延长自旋时间，否则将线程阻塞，下一次适当缩短自旋时间

偏向锁 -》轻量级锁-》重量级锁（1.6之前默认实现）-》线程获取锁失败直接进入阻塞状态-》（os用户态-》内核态）

1.6之后默认为偏向锁

偏向锁：（乐观锁，锁一直是一个线程来回的获取）：
当线程第一次获取锁时，将偏向锁线程转换为当前线程，以后再次获取时，不再有枷锁与解锁的过程。只是简单判断获取锁线程是否是当前线程

轻量级锁：在不同的时间段内有不同的线程在尝试获取锁
每次锁的获取都需要枷锁与解锁过程

重量级锁： 在同一时间段内有不同的线程尝试获取锁

锁粗化
将多粗连续额加减锁过程简化为一次的大的加减锁过程


锁消除
在没有多线程访问的场景下，将锁直接消除

死锁
产生原因：同时满足才会4个原因
1.互斥：共享资源X,Y只能被一个线程占用
2.占有且等待：线程1已经百取得共享资源X，同时在等待资源Y，并且不释放X
3.不可抢占：其他线程无法抢占线程1已经占有的资源X
4.循环等待：线程1等待线程2的资源，线程2等待线程1的资源

死锁的现象：程序出现假死的现象

死锁的解决：破坏任意一个条件


1.5引入lock体系，解决死锁问题

Lock使用格式
try lock.lock();    
catch  finally   
lock.unlock();

2.lock的重要方法
响应中断 lockInterruptibly();  破坏不可抢占性
非阻塞式获取锁 若获取锁失败，线程继续执行，不再阻塞  boolean tryLock();  占有且等待
支持超时,，获取锁失败的线程，继续等待一段时间尝试获取，如果成功，则继续获取 boolean tryLock()   

reentrantLock;可重入锁 语义与synchronized基本一致 也是独占锁的实现

面试题：reentrantLock与synchronized的关系和区别（）
共同点	语义一样，都是可重入锁，都属于独占锁的实现
不同点	a.synchronized 关键字 属于JVM层面的实现 reentrantLock 属于Java语言层面的实现
		b.reentrantLock具备synchrnized锁不具备的功能，如：响应中断，支持超时，支持非阻塞式的获取锁。
  c.synchronized只有一个等待队列，而lock调用newCondition()产生多个等待队列。
  
等待/唤醒
wait/notify : 	synchronized
awiat/signal	Condition : Lock
变种面试题：Synchronized与LOCK的关系去区别
共同点	语义一样，都是可重入锁，都属于独占锁的实现
不同点	a.synchronized 关键字 属于JVM层面的实现 reentrantLock 属于Java语言层面的实现
		b.reentrantLock具备synchrnized锁不具备的功能，如：响应中断，支持超时，支持非阻塞式的获取锁。
  c.synchronized只有一个等待队列，而lock调用newCondition()产生多个等待队列。
  d.可重入读写锁RenntrantReadWriteLock:



wait 或者  notify
同步队列：所有获取锁失败的线程进入同步对列排队获取锁
等待队列：调用wait的线程置入等待队列，等待被唤醒（notify）

公平锁：等待时间最长的锁。

深浅拷贝

实现深拷贝：
1.使用序列化
2.递归实现Cloneable()标记接口

内存区域划分

内存私有
随着线程的创建而创建 随着线程的小辉而回收 生命周期与线程相同 不同的线程间隔离
程序计数器 	记录当前线程所执行的字节码行号，唯一一块不产生内存溢出的区域OOM  native方法值为0
虚拟机栈		java方法的内存模型 				
本地方法栈	本地方法的内存模型	Xss设置栈的大小
HotSpot	本地方法栈与虚拟机合二为一
线程共享
1.堆（GC堆）
2.方法区（1.8之前的永久代）
运行时的常量池（方法区的一部分）

判断对象是否存活
1.引用计数法（C++智能指针，PythonGC）
无法解决循环引用问题
2.可达性分析算法
GC Roots
a.勒种的静态变量.常量
b.栈中的局部变量

1.2之后关于引用的扩充
强 软 弱 虚 由钱强到弱

对象的自我拯救  finalize()Object类所拥有的
 
fianl finally finalize()的区别

如何进行垃圾回收
java采用分带回收算法，将内存（堆内存）划分为：
新生代（对象默认在新生代产生，对象的存活率低）	复制算法 
老年代（对象的存活率高）	标记整理算法


juc:Lock 1.5

tryLock() : 非阻塞式获取锁
lockInterruptily() : 响应中断
tryLock(long time,TimeUnit) : 支持超时


synchronized与ReentrantLock区别:
1.

synchronized与Lock的区别:
1.synchronized是JVM层面,关键字;Lock是Java语言层面实现的"管程".
2.Lock具备了一些synchronized不具备的特性,如...，支持公平锁,支持多个等待队列,
还支持读写锁

读写锁:读者写者问题(美团)
读线程:读读异步，读写同步
写线程:写写同步

读写锁实现:ReentrantReadWriteLock(实现缓存HashMap + ReentrantReadWriteLock)
读锁:ReadLock，多个线程在同一时刻可以共同取得该读锁
写锁:WriteLock,独占锁，多个线程在同一时刻只有一个线程可以取得该锁

共享锁:多个线程可以同时取得该锁 读锁 ReadLock 共享锁 == 无锁?
当写线程开始工作，所有其他线程(包含读线程)全部进入阻塞态.

JDK1.8 StampedLock 更加乐观的锁实现，性能比ReentrantReadWriteLock还高.

juc包下工具类:CAS+Lock

1.闭锁CountDownLatch

public CountDownLatch(int count) : count表示需要等待的线程个数

public void countDown() : 计数器值-1(类似运动员线程)

public void await() throws InterruptedException : 等待线程调用该方法进入阻塞态，直到计数器减为0.

CountDownLatch对象在计数器值减为0时不可恢复。
只会阻塞调用await方法的线程

2.循环栅栏CyclicBarrier

public CyclicBarrier(int parties) : parties表示需要有多少个线程同时暂停以及恢复执行

public int await() : cyclicBarrier 计数器-1，当减为0时，所有阻塞线程同时恢复执行

 
public CyclicBarrier(int parties, Runnable barrierAction)
多个线程在恢复执行之前，任意挑选一个线程执行barrierAction任务后，再同时恢复执行。

CyclicBarrier计时器值可以恢复reset()，CyclicBarrier的对象可以重复使用。

3.Exchanger交换器
Exchanger用于两个线程交换数据，当缓冲区只有一个线程时，该线程会阻塞直到配对成功再交换数据恢复执行。

4.Semaphore信号量
8工人  5台设备
public Semaphore(int permits) : 表示许可的数量
public Semaphore(int permits, boolean fair) : 等待时间最长的线程最先获取到许可
public void acquire() : 申请许可，尝试获取许可
public void release() : 释放许可。

线程池
ExecutorService:普通调度池
	void execute(Runnable r)
	Future submit(Callable || Runnable)

ScheduledExecutorService:定时调度池
	public ScheduledFuture<?> scheduleAtFixedRate(Runnable command,
                                                  long initialDelay,
                                                  long period,
                                                  TimeUnit unit);
ThreadPoolExecutor:线程池核心类
public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue<Runnable> workQueue,
                              RejectedExecutionHandler handler);

常见阻塞队列:
	LinkedBlockingQueue:基于链表的无界阻塞队列
		-内置的固定大小线程池就采用此队列
	SynchronousQueue:不存储元素的无界阻塞队列
		-内置的缓冲线程池就采用此队列

Executors:线程池的工具类
-单线程池
	newSingleThreadExecutor()
-固定大小线程池(系统资源紧张，适用于负载较重的服务器)
	newFixedThreadPool(int nThreads)
-缓存池(服务器负载较轻，适用于处理很多短期异步小任务
当提交任务速度>>任务处理速度,不断产生新线程;任务处理速度>提交任务速度,只有一个线程)
	newCachedThreadPool()
-定时调度池(需要执行定时任务场合)
	newScheduledThreadPool(int corePoolSize)
核心池

最大线程池

阻塞队列

拒绝策略

线程池:为何推荐使用线程池来新建线程
1.线程池的工作流程
2.如何自定义线程池
	-核心线程池类ThreadPoolExecutor参数配置
	-线程池工作线程Worker,如何实现
3.在何种场景下选用何种线程池

JMM:Java内存模型(关于并发程序的内存模型-逻辑模型)
1.JMM的工作流程
工作内存:每个线程创建时分配的空间，线程私有.所有变量的读写均在工作内存中进行。

主内存:所有线程共享的内存区域,存放所有共享变量(类的实例变量、静态变量、常量)。

2.JMM三大特性
只有以下三个特性同时满足，才是线程安全的代码。

原子性:基本数据类型的访问读写都属于原子性操作.
若需要更大范围的原子性，需要使用synchronized或lock来保证

可见性:任意一个线程修改了共享变量的值，其他线程能够立即得知此修改
synchronized、volatile、final实现可见性

有序性:逻辑上写在前面的代码优先发生于写在后面的代码。

3.volatile变量的特殊规则

3.1 可见性
volatile boolean shutdownRequested;
// 线程1
public void shutdown() {
    shutdownRequested = true;
}
// 线程2
public void work() {
    while(!shutdownRequested) {

    } 
}

3.2 禁止指令重排

