/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    //判断树是否相同
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        int left1 = maxDepth(root.left);
        int right1 = maxDepth(root.right);
        return Math.max(left1,right1) + 1;
    }
    
    //判断树是否为平衡二叉树
    public boolean isBalanced(TreeNode root) {
        if(root == null){
            return true;
        }else{
            int nums1 = maxDepth(root.left);
            int nums2 = maxDepth(root.right);
            int nums3 = nums1 - nums2;
            if(nums3 * nums3 < 2){
	//当前树是否平衡
                return isBalanced(root.left) && isBalanced(root.right);
            }else{
                return false;
            }
        }
    }
}



给定一个二叉树，判断它是否是高度平衡的二叉树。

本题中，
一棵高度平衡二叉树定义为：


一个二叉树每个节点 的左右两
个子树的高度差的绝对值不超过1。


示例 1:

给定二叉树
 [3,9,20,null,null,15,7]

    3
   / \
  9  20
    /  \
   15   7

返回 true 。

示例 2:

给定二叉树 [1,2,2,3,3,null,null,4,4]

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4


返回 false 。