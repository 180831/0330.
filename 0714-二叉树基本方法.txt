public int i = 0;
    //根据字符串创建二叉树
    TreeNode createTestTree(String s){
         if(s.length() == 0){
             return null;
         }
         TreeNode root = null;
        //如果对应字符不是#，创建节点
        if (s.charAt(i) != '#') {
            root = new TreeNode(s.charAt(i));
            i++;
            root.left = createTestTree(s);
            root.right = createTestTree(s);
        }
        //如果是#，直接下标++
        else {
            i++;
        }
         return root;
    }

    // 结点个数
    int getSize(TreeNode root){
        if(root == null){
            return 0;
        }
        return getSize(root.left) + getSize(root.right) + 1;
    }

    // 叶子结点个数
    int getLeafSize(TreeNode root){
        if(root == null){
            return 0;
        }
        if (root.left == null && root.right == null) {
            return 1;
        }
        return getLeafSize(root.left) + getLeafSize(root.right);
    }

    // 第 k 层结点个数
    int getKLevelSize(TreeNode root, int k){
        if(root == null){
            return 0;
        }
        if( k == 1){
            return 1;
        }
        k--;
        return getKLevelSize(root.left,k) + getKLevelSize(root.right,k);
    }

    // 查找，依次在二叉树的 根、左子树、右子树 中查找 value，如果找到，返回结点，否则返回 null
    TreeNode find(TreeNode root, int value){
        if(root == null){
            return null;
        }
        if(root.val == value){
            return root;
        }
        TreeNode r = find(root.left,value);
        if(r != null){
            return r;
        }
        r = find(root.right,value);
        if(r != null){
            return r;
        }
        return null;
    }

    //二叉树的高度
    int height(TreeNode root){
        if(root == null){
            return 0;
        }
        int left1 = height(root.left);
        int right1 = height(root.right);
        return Math.max(left1,right1) + 1;
    }