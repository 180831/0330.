/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
	//前序遍历返回一个队列
    public Queue<Integer> preorderTraversal(TreeNode root) {
        Stack<TreeNode> stack = new Stack<>();
        List<Integer> list = new ArrayList<>();
        TreeNode cur = root;
        TreeNode top = null;
        while(cur != null || !stack.isEmpty()){
            if(cur != null){
                list.add(cur.val);
                stack.push(cur);
                cur = cur.left;
            }
            if(cur == null){
                top = stack.pop();
                cur = top.right;
            }
        }
        Queue<Integer> queue = new LinkedList<>();
        Iterator<Integer> iterator = list.iterator();
        while(iterator.hasNext()) {
             queue.offer(iterator.next());
        }
        return queue;
    }
    
    public void flatten(TreeNode root) {
        Queue<Integer> queue = new LinkedList<>();
        queue = preorderTraversal(root);  
        queue.poll();
        while(!queue.isEmpty()) {
            //root = new TreeNode(queue.poll());
            root.left = null;
            root.right = new TreeNode(queue.poll());
            root = root.right;
        } 
    }
}