package Solution;

/**
 * Created with IntelliJ IDEA
 * Description:背包问题II-动态规划
 * User:Light_Long
 * Date:2019-07-25
 * Time:22:15
 */
public class Solution {
    public int backPackII(int m, int[] A, int[] V) {
        // write your code
        int[][] arr = new int[A.length + 1][m + 1];
        for (int i = 0;i < m + 1;i++) { //背包的容量
            arr[0][i] = 0;
        }
        for (int i = 0;i < A.length + 1;i++) {
            arr[i][0] = 0;  //物品的个数
        }
        for(int i = 1;i <= A.length;i++) {
            for(int j = 1;j <= m;j++) {
                if(A[i - 1] > j || A[i - 1] > m) {  //j表示容量大小
                    arr[i][j] = arr[i - 1][j];
                }else {     //可以放下，取上一行j - A[i]大小的值 + V[i] 就是所求最大值
                    arr[i][j] = arr[i - 1][j - A[i - 1]] + V[i - 1];
                    arr[i][j] = Math.max(arr[i - 1][j],arr[i][j]);
                }
            }
        }
        return arr[A.length][m];
    }

    public static void main(String[] args) {
        int[] arr1 = {2,3,5,7};
        int[] arr2 = {1,5,2,4};
        Solution solution = new Solution();
        int pop = solution.backPackII(10,arr1,arr2);
        System.out.println(pop);
    }
}

125. 背包问题 II
中文

English
有 n 个物品和一个大小为 m 的背包. 给定数组 A 表示每个物品的大小和数组 V 表示每个物品的价值.
问最多能装入背包的总价值是多大?
样例
样例 1:
输入: m = 10, A = [2, 3, 5, 7], V = [1, 5, 2, 4]
输出: 9
解释: 装入 A[1] 和 A[3] 可以得到最大价值, V[1] + V[3] = 9 
样例 2:
输入: m = 10, A = [2, 3, 8], V = [2, 5, 8]
输出: 10
解释: 装入 A[0] 和 A[2] 可以得到最大价值, V[0] + V[2] = 10
挑战
O(nm) 空间复杂度可以通过, 不过你可以尝试 O(m) 空间复杂度吗?
注意事项
A[i], V[i], n, m 均为整数
你不能将物品进行切分
你所挑选的要装入背包的物品的总大小不能超过 m
每个物品只能取一次


输入测试数据 (每行一个参数)
如何理解测试数据？


