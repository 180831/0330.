class MyCircularQueue {
    
    private int front;
    private int rear;
    private int[] elem;
    private int usedSize;
    private  int DEFAULT_CAPACITY;//总共大小

    /** Initialize your data structure here. Set the size of the queue to be k. */
    public MyCircularQueue(int k) {
        elem = new int[k+1];
        DEFAULT_CAPACITY = k+1;
        front = 0;
        rear = 0;
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    public boolean enQueue(int value) {
        if(isFull()) {
            return false;
        }
        elem[rear] = value;
        rear = (rear+1)%DEFAULT_CAPACITY;
        usedSize++;
        return true;
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    public boolean deQueue() {
        if(isEmpty()){
            return  false;
        }
        front = (front+1)%DEFAULT_CAPACITY;
        usedSize--;
        return true;
    }
    
    /** Get the front item from the queue. */
    public int Front() {
        if(isEmpty()){
            return -1;
        }
        return elem[front];
    }
    
    /** Get the last item from the queue. */
    public int Rear() {
        if(isEmpty()){
            return -1;
            //return -1;
        }
        //return this.elem[(this.rear-1+DEFAULT_CAPACITY)%this.usedSize];
        //return this.elem[(this.rear-1+this.usedSize)%DEFAULT_CAPACITY];
        int tmp = rear == 0 ? elem.length-1 : rear-1;
        return elem[tmp];
    }
    
    /** Checks whether the circular queue is empty or not. */
    public boolean isEmpty() {
        return front == rear;
    }
    
    /** Checks whether the circular queue is full or not. */
    public boolean isFull() {
        if((rear+1)%DEFAULT_CAPACITY == front){
            return true;
        }
        return false;
    }
}
