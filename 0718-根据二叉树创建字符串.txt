/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
     public void tree2strChild(TreeNode t,StringBuilder str) { 
        if(t == null) {
            return;
        }
        str.append(t.val);
        if(t.left == null && t.right == null){
            return;
        }
        if(t.left == null && t.right != null){
            str.append("()");
        }
        if(t.left != null){
            str.append("(");
            tree2strChild(t.left,str);
            str.append(")");
        }
        
        if(t.right == null){
            return;
        }
        if(t.right != null){
            str.append("(");
            tree2strChild(t.right,str);
            str.append(")");
        }
        
    }

    public String tree2str(TreeNode t) {
        StringBuilder str = new StringBuilder();
        tree2strChild(t,str);
        return str.toString();

    }
}

你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和
整数组成的字符串。

空节点则用一对空括号 "()" 表示。而且你需
要省略所有不影响字符串与原始二叉树之间的一对一映射关系的
空括号对。

示例 1:

输入: 二叉树: [1,2,3,4]
       1
     /   \
    2     3
   /    
  4     

输出: "1(2(4))(3)"

解释: 原本将是“1(2(4)())(3())”，
在你省略所有不必要的空括号对之后，
它将是“1(2(4))(3)”。


示例 2:

输入: 二叉树: [1,2,3,null,4]
       1
     /   \
    2     3
     \  
      4 

输出: "1(2()(4))(3)"

解释: 和第一个示例相似，
除了我们不能省略第一个对括号来中断输入和输出之间的一对一
映射关系。