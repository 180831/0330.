import java.security.PrivateKey;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * Created with IntelliJ IDEA
 * Description:
 * User:Light_Long
 * Date:2019-06-08
 * Time:17:36
 */

class Test implements Runnable{
    /*private int ticket = 10;
    @Override
    public void run() {
        while(this.ticket > 0){
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(Thread.currentThread().getName() +
                    "还剩" + this.ticket-- + "张票");
        }
    }*/

    /*private int ticket = 10; // 一共十张票
    @Override
    public void run() {
        for (int i = 0; i < 10; i++) {
            this.sale();
        }
    }
    public synchronized void sale() {
        if (this.ticket > 0) { // 还有票
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
// TODO Auto-generated catch block
                e.printStackTrace();
            } // 模拟网络延迟
            System.out.println(Thread.currentThread().getName() + ",还有"
                            + this.ticket-- + "张票");
        }
    }*/


    private int ticket = 20;
    private Lock ticketLock = new ReentrantLock() ;
    @Override
    public void run() {
        for (int i = 0; i < 20; i++) {
            ticketLock.lock();
            try {
                if (this.ticket > 0) { // 还有票
                    try {
                        Thread.sleep(200);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    } // 模拟网络延迟
                    System.out.println(Thread.currentThread().getName() + ",还有" +
                            this.ticket-- + " 张票");
                }
            } finally {
                ticketLock.unlock();
            }
        }
    }
}
public class Solution {

    public static void main(String[] args) {
        /*Test test = new Test();
        new Thread(test,"黄牛A").start();
        new Thread(test,"黄牛B").start();
        new Thread(test,"黄牛C").start();*/

        Test mt = new Test();
        Thread t1 = new Thread(mt, "黄牛A");
        Thread t2 = new Thread(mt, "黄牛B");
        Thread t3 = new Thread(mt, "黄牛C");
        /*t1.setPriority(Thread.MAX_PRIORITY);  优先级，不一定起作用
        t2.setPriority(Thread.MAX_PRIORITY);
        t3.setPriority(Thread.MAX_PRIORITY);
        t3.setPriority(10);*/
        t1.start();
        t2.start();
        t3.start();
    }
}


