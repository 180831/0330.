/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    public boolean isSameTree(TreeNode p, TreeNode q) {
            if(p == null && q != null){
                return false;   
            }
            if(p != null && q == null){
                return false;   
            }
            if(p == null && q == null){
                return true;   
            }
            if(p.val != q.val){
                return false;   
            }
            return isSameTree(q.left,p.left) && isSameTree(q.right,p.right);
    }
    
    public boolean isSubtree(TreeNode s, TreeNode t) {
        if(s == null || t == null){
            return false;
        }
        if(isSameTree(s,t)){
            return true;
        }
        if(isSubtree(s.left,t)){
            return true;
        }
        if(isSubtree(s.right,t)){
            return true;
        }
        return false;
    }
}


给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构
和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所
有子孙。s 也可以看做它自身的一棵子树。

示例 1:
给定的树 s:

     3
    / \
   4   5
  / \
 1   2


给定的树 t：

   4 
  / \
 1   2


返回 true，因为 t 与 s 的一个子树拥有相同的结构和
节点值。

示例 2:
给定的树 s：

     3
    / \
   4   5
  / \
 1   2
    /
   0


给定的树 t：

   4
  / \
 1   2


返回 false。

