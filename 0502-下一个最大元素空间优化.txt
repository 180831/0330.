class Solution {
    
   // public static void put(){
      //  while(!myStack1.empty()){
      //      myStack2.push(myStack1.peek());
      //      myStack1.pop();
      //  }
       // while(!myStack2.empty()){
        //    myStack1.push(myStack2.peek());
       //     myStack2.pop();
        //}
    //}
    
    
   public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack<Integer> myStack1 = new Stack<>();
        Stack<Integer> myStack2 = new Stack<>();
        int usedsize = 0;
        int[] arr = new int[nums1.length];
        for(int i = nums2.length - 1;i >= 0;i--){
            myStack1.push(nums2[i]);
        }
        for(int j = 0;j < nums1.length;j++){
            int temp = nums1[j];
            while(!myStack1.empty() && temp != myStack1.peek()){
                myStack2.push(myStack1.peek());
                myStack1.pop();
            }

            while(!myStack1.empty()){
                if(temp < myStack1.peek()){
                    arr[usedsize++] = myStack1.peek();
                    break;
                }
                myStack2.push(myStack1.peek());
                myStack1.pop();
            }
            if(myStack1.empty()){
                arr[usedsize++] = -1;
            }
            while(!myStack2.empty()){
                myStack1.push(myStack2.peek());
                myStack2.pop();
            }
        }
        return arr;
    }
}